// Test simple des annulations de livraison
import axios from 'axios';

const BASE_URL = 'http://localhost:5000/api';

async function testSimpleDelivery() {
  console.log('üß™ Test simple des annulations de livraison...\n');

  try {
    // 1. Cr√©er une livraison de test avec la commande existante
    console.log('üîÑ Cr√©ation d\'une livraison de test...');
    
    const testDelivery = {
      orderId: 13, // Commande cr√©√©e pr√©c√©demment
      deliveryAddress: '123 Test Street, Ville Test',
      deliveryNotes: 'Test des fonctionnalit√©s d\'annulation',
      status: 'pending',
      createdBy: 1
    };
    
    const deliveryResponse = await axios.post(`${BASE_URL}/deliveries`, testDelivery);
    const deliveryId = deliveryResponse.data.id;
    console.log(`‚úÖ Livraison cr√©√©e: ${deliveryResponse.data.code} (ID: ${deliveryId})`);

    // 2. Cr√©er des r√©servations de stock simples
    console.log('\nüîÑ Cr√©ation des r√©servations de stock...');
    
    const orderItems = [
      { id: 19, articleId: 36, quantity: '1.000' }, // BANANE - ID de l'article de commande cr√©√©
      { id: 20, articleId: 37, quantity: '1.000' }  // FRAISE - ID de l'article de commande cr√©√©
    ];
    
    try {
      const reservationsResponse = await axios.post(`${BASE_URL}/deliveries/${deliveryId}/reservations`, { 
        orderItems 
      });
      console.log(`‚úÖ R√©servations cr√©√©es: ${reservationsResponse.data.length} r√©servations`);
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation des r√©servations:');
      if (error.response) {
        console.error('   Status:', error.response.status);
        console.error('   Data:', error.response.data);
      } else {
        console.error('   Error:', error.message);
      }
      return;
    }

    // 3. V√©rifier le stock disponible avant annulation
    console.log('\nüìä Stock disponible avant annulation:');
    for (const item of orderItems) {
      const stockResponse = await axios.get(`${BASE_URL}/articles/${item.articleId}/available-stock`);
      console.log(`   Article ${item.articleId}: Stock disponible = ${stockResponse.data.availableStock}`);
    }

    // 4. Test de l'annulation AVANT validation
    console.log('\nüîÑ Test de l\'annulation AVANT validation...');
    const cancelBeforeResponse = await axios.post(`${BASE_URL}/deliveries/${deliveryId}/cancel-before-validation`, {
      reason: 'Client a chang√© d\'avis'
    });
    console.log(`‚úÖ Livraison annul√©e: ${cancelBeforeResponse.data.status}`);

    // 5. V√©rifier le stock disponible apr√®s annulation
    console.log('\nüìä Stock disponible apr√®s annulation:');
    for (const item of orderItems) {
      const stockResponse = await axios.get(`${BASE_URL}/articles/${item.articleId}/available-stock`);
      console.log(`   Article ${item.articleId}: Stock disponible = ${stockResponse.data.availableStock}`);
    }

    console.log('\nüéâ Test de l\'annulation AVANT validation r√©ussi !');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:');
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Data:', error.response.data);
    } else if (error.request) {
      console.error('   Request error:', error.request);
    } else {
      console.error('   Error:', error.message);
    }
  }
}

testSimpleDelivery();
