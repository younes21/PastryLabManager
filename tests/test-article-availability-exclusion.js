/**
 * Test pour v√©rifier que l'endpoint /api/articles/:articleId/availability 
 * exclut correctement les r√©servations de la livraison en cours de modification
 */

const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3000';

async function testArticleAvailabilityExclusion() {
  console.log('üß™ Test de l\'exclusion des r√©servations dans l\'endpoint availability');
  
  try {
    // 1. Cr√©er une commande de test
    console.log('üìù Cr√©ation d\'une commande de test...');
    const orderResponse = await fetch(`${BASE_URL}/api/orders`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        clientId: 1,
        deliveryDate: new Date().toISOString().split('T')[0],
        notes: 'Commande de test pour v√©rifier l\'exclusion dans availability',
        items: [
          {
            articleId: 1,
            quantity: '10'
          }
        ]
      })
    });
    
    if (!orderResponse.ok) {
      throw new Error(`Erreur cr√©ation commande: ${orderResponse.status}`);
    }
    
    const order = await orderResponse.json();
    console.log(`‚úÖ Commande cr√©√©e: ${order.code} (ID: ${order.id})`);
    
    // 2. R√©cup√©rer la disponibilit√© initiale de l'article
    console.log('üìä R√©cup√©ration de la disponibilit√© initiale...');
    const initialAvailability = await fetch(`${BASE_URL}/api/articles/1/availability`);
    const initialData = await initialAvailability.json();
    
    console.log(`üìä Disponibilit√© initiale:`);
    console.log(`   - Stock total: ${initialData.summary.totalStock}`);
    console.log(`   - Stock r√©serv√©: ${initialData.summary.totalReserved}`);
    console.log(`   - Stock disponible: ${initialData.summary.totalAvailable}`);
    
    // 3. Cr√©er une livraison qui va r√©server du stock
    console.log('üì¶ Cr√©ation d\'une livraison (quantit√©=3)...');
    const deliveryResponse = await fetch(`${BASE_URL}/api/deliveries`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        orderId: order.id,
        clientId: 1,
        deliveryDate: new Date().toISOString().split('T')[0],
        note: 'Livraison de test pour r√©server du stock',
        items: [
          {
            idArticle: 1,
            qteLivree: '3',
            idlot: null,
            idzone: 1
          }
        ]
      })
    });
    
    if (!deliveryResponse.ok) {
      throw new Error(`Erreur cr√©ation livraison: ${deliveryResponse.status}`);
    }
    
    const delivery = await deliveryResponse.json();
    console.log(`‚úÖ Livraison cr√©√©e: ${delivery.code} (ID: ${delivery.id})`);
    
    // 4. V√©rifier la disponibilit√© apr√®s cr√©ation (sans exclusion)
    console.log('üìä V√©rification de la disponibilit√© apr√®s cr√©ation (sans exclusion)...');
    const afterCreationAvailability = await fetch(`${BASE_URL}/api/articles/1/availability`);
    const afterCreationData = await afterCreationAvailability.json();
    
    console.log(`üìä Disponibilit√© apr√®s cr√©ation:`);
    console.log(`   - Stock total: ${afterCreationData.summary.totalStock}`);
    console.log(`   - Stock r√©serv√©: ${afterCreationData.summary.totalReserved}`);
    console.log(`   - Stock disponible: ${afterCreationData.summary.totalAvailable}`);
    
    // Le stock r√©serv√© devrait augmenter de 3
    const expectedReservedAfterCreation = initialData.summary.totalReserved + 3;
    if (Math.abs(afterCreationData.summary.totalReserved - expectedReservedAfterCreation) > 0.001) {
      throw new Error(`Erreur: stock r√©serv√© attendu=${expectedReservedAfterCreation}, obtenu=${afterCreationData.summary.totalReserved}`);
    }
    
    // 5. V√©rifier la disponibilit√© avec exclusion de la livraison
    console.log('üìä V√©rification de la disponibilit√© avec exclusion de la livraison...');
    const withExclusionAvailability = await fetch(`${BASE_URL}/api/articles/1/availability?excludeDeliveryId=${delivery.id}`);
    const withExclusionData = await withExclusionAvailability.json();
    
    console.log(`üìä Disponibilit√© avec exclusion:`);
    console.log(`   - Stock total: ${withExclusionData.summary.totalStock}`);
    console.log(`   - Stock r√©serv√©: ${withExclusionData.summary.totalReserved}`);
    console.log(`   - Stock disponible: ${withExclusionData.summary.totalAvailable}`);
    
    // Le stock r√©serv√© devrait √™tre le m√™me qu'initial (exclusion de la r√©servation)
    if (Math.abs(withExclusionData.summary.totalReserved - initialData.summary.totalReserved) > 0.001) {
      throw new Error(`Erreur: stock r√©serv√© avec exclusion attendu=${initialData.summary.totalReserved}, obtenu=${withExclusionData.summary.totalReserved}`);
    }
    
    // Le stock disponible devrait √™tre le m√™me qu'initial
    if (Math.abs(withExclusionData.summary.totalAvailable - initialData.summary.totalAvailable) > 0.001) {
      throw new Error(`Erreur: stock disponible avec exclusion attendu=${initialData.summary.totalAvailable}, obtenu=${withExclusionData.summary.totalAvailable}`);
    }
    
    // 6. Modifier la livraison (augmenter la quantit√©)
    console.log('‚úèÔ∏è Modification de la livraison (quantit√©: 3 ‚Üí 5)...');
    const updateResponse = await fetch(`${BASE_URL}/api/deliveries/${delivery.id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        orderId: order.id,
        clientId: 1,
        deliveryDate: new Date().toISOString().split('T')[0],
        note: 'Livraison modifi√©e',
        items: [
          {
            idArticle: 1,
            qteLivree: '5', // Augmenter de 3 √† 5
            idlot: null,
            idzone: 1
          }
        ]
      })
    });
    
    if (!updateResponse.ok) {
      const errorText = await updateResponse.text();
      throw new Error(`Erreur modification livraison: ${updateResponse.status} - ${errorText}`);
    }
    
    const updatedDelivery = await updateResponse.json();
    console.log(`‚úÖ Livraison modifi√©e: ${updatedDelivery.code}`);
    
    // 7. V√©rifier la disponibilit√© apr√®s modification (sans exclusion)
    console.log('üìä V√©rification de la disponibilit√© apr√®s modification (sans exclusion)...');
    const afterUpdateAvailability = await fetch(`${BASE_URL}/api/articles/1/availability`);
    const afterUpdateData = await afterUpdateAvailability.json();
    
    console.log(`üìä Disponibilit√© apr√®s modification:`);
    console.log(`   - Stock total: ${afterUpdateData.summary.totalStock}`);
    console.log(`   - Stock r√©serv√©: ${afterUpdateData.summary.totalReserved}`);
    console.log(`   - Stock disponible: ${afterUpdateData.summary.totalAvailable}`);
    
    // Le stock r√©serv√© devrait √™tre de 5 (nouvelle r√©servation)
    const expectedReservedAfterUpdate = initialData.summary.totalReserved + 5;
    if (Math.abs(afterUpdateData.summary.totalReserved - expectedReservedAfterUpdate) > 0.001) {
      throw new Error(`Erreur: stock r√©serv√© apr√®s modification attendu=${expectedReservedAfterUpdate}, obtenu=${afterUpdateData.summary.totalReserved}`);
    }
    
    // 8. V√©rifier la disponibilit√© avec exclusion apr√®s modification
    console.log('üìä V√©rification de la disponibilit√© avec exclusion apr√®s modification...');
    const withExclusionAfterUpdateAvailability = await fetch(`${BASE_URL}/api/articles/1/availability?excludeDeliveryId=${delivery.id}`);
    const withExclusionAfterUpdateData = await withExclusionAfterUpdateAvailability.json();
    
    console.log(`üìä Disponibilit√© avec exclusion apr√®s modification:`);
    console.log(`   - Stock total: ${withExclusionAfterUpdateData.summary.totalStock}`);
    console.log(`   - Stock r√©serv√©: ${withExclusionAfterUpdateData.summary.totalReserved}`);
    console.log(`   - Stock disponible: ${withExclusionAfterUpdateData.summary.totalAvailable}`);
    
    // Le stock r√©serv√© devrait √™tre le m√™me qu'initial (exclusion de la r√©servation)
    if (Math.abs(withExclusionAfterUpdateData.summary.totalReserved - initialData.summary.totalReserved) > 0.001) {
      throw new Error(`Erreur: stock r√©serv√© avec exclusion apr√®s modification attendu=${initialData.summary.totalReserved}, obtenu=${withExclusionAfterUpdateData.summary.totalReserved}`);
    }
    
    console.log('üéâ Test r√©ussi ! L\'exclusion des r√©servations dans l\'endpoint availability fonctionne correctement.');
    console.log('üìã R√©sum√©:');
    console.log('   - L\'endpoint availability exclut correctement les r√©servations de la livraison sp√©cifi√©e');
    console.log('   - Le stock r√©serv√© diminue quand on exclut la livraison du calcul');
    console.log('   - Le stock disponible augmente quand on exclut la livraison du calcul');
    console.log('   - L\'exclusion fonctionne aussi apr√®s modification de la livraison');
    
  } catch (error) {
    console.error('‚ùå Test √©chou√©:', error.message);
    throw error;
  }
}

// Ex√©cuter le test si le script est appel√© directement
if (require.main === module) {
  testArticleAvailabilityExclusion()
    .then(() => {
      console.log('‚úÖ Tous les tests sont pass√©s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Test √©chou√©:', error);
      process.exit(1);
    });
}

module.exports = { testArticleAvailabilityExclusion };
