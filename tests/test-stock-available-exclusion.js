/**
 * Test pour v√©rifier que le stock disponible exclut correctement les r√©servations 
 * de la livraison en cours de modification
 */

const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3000';

async function testStockAvailableExclusion() {
  console.log('üß™ Test de l\'exclusion des r√©servations du stock disponible');
  
  try {
    // 1. Cr√©er une commande de test
    console.log('üìù Cr√©ation d\'une commande de test...');
    const orderResponse = await fetch(`${BASE_URL}/api/orders`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        clientId: 1,
        deliveryDate: new Date().toISOString().split('T')[0],
        notes: 'Commande de test pour v√©rifier l\'exclusion du stock',
        items: [
          {
            articleId: 1,
            quantity: '10'
          }
        ]
      })
    });
    
    if (!orderResponse.ok) {
      throw new Error(`Erreur cr√©ation commande: ${orderResponse.status}`);
    }
    
    const order = await orderResponse.json();
    console.log(`‚úÖ Commande cr√©√©e: ${order.code} (ID: ${order.id})`);
    
    // 2. R√©cup√©rer le stock disponible initial
    console.log('üìä R√©cup√©ration du stock disponible initial...');
    const initialPageData = await fetch(`${BASE_URL}/api/deliveries/page-data?orderId=${order.id}`);
    const initialData = await initialPageData.json();
    
    const initialArticle = initialData.articles.find(a => a.id === 1);
    const initialStockDispo = initialArticle?.totalDispo || 0;
    console.log(`üìä Stock disponible initial: ${initialStockDispo}`);
    
    // 3. Cr√©er une livraison qui va r√©server du stock
    console.log('üì¶ Cr√©ation d\'une livraison (quantit√©=3)...');
    const deliveryResponse = await fetch(`${BASE_URL}/api/deliveries`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        orderId: order.id,
        clientId: 1,
        deliveryDate: new Date().toISOString().split('T')[0],
        note: 'Livraison de test pour r√©server du stock',
        items: [
          {
            idArticle: 1,
            qteLivree: '3',
            idlot: null,
            idzone: 1
          }
        ]
      })
    });
    
    if (!deliveryResponse.ok) {
      throw new Error(`Erreur cr√©ation livraison: ${deliveryResponse.status}`);
    }
    
    const delivery = await deliveryResponse.json();
    console.log(`‚úÖ Livraison cr√©√©e: ${delivery.code} (ID: ${delivery.id})`);
    
    // 4. V√©rifier le stock disponible apr√®s cr√©ation (sans exclusion)
    console.log('üìä V√©rification du stock disponible apr√®s cr√©ation (sans exclusion)...');
    const afterCreationData = await fetch(`${BASE_URL}/api/deliveries/page-data?orderId=${order.id}`);
    const afterCreation = await afterCreationData.json();
    
    const afterCreationArticle = afterCreation.articles.find(a => a.id === 1);
    const afterCreationStockDispo = afterCreationArticle?.totalDispo || 0;
    console.log(`üìä Stock disponible apr√®s cr√©ation: ${afterCreationStockDispo}`);
    
    // Le stock disponible devrait √™tre r√©duit de 3 (r√©servation)
    const expectedStockAfterCreation = initialStockDispo - 3;
    if (Math.abs(afterCreationStockDispo - expectedStockAfterCreation) > 0.001) {
      throw new Error(`Erreur: stock disponible attendu=${expectedStockAfterCreation}, obtenu=${afterCreationStockDispo}`);
    }
    
    // 5. V√©rifier le stock disponible avec exclusion de la livraison
    console.log('üìä V√©rification du stock disponible avec exclusion de la livraison...');
    const withExclusionData = await fetch(`${BASE_URL}/api/deliveries/page-data?orderId=${order.id}&excludeDeliveryId=${delivery.id}`);
    const withExclusion = await withExclusionData.json();
    
    const withExclusionArticle = withExclusion.articles.find(a => a.id === 1);
    const withExclusionStockDispo = withExclusionArticle?.totalDispo || 0;
    console.log(`üìä Stock disponible avec exclusion: ${withExclusionStockDispo}`);
    
    // Le stock disponible devrait √™tre le m√™me qu'initial (exclusion de la r√©servation)
    if (Math.abs(withExclusionStockDispo - initialStockDispo) > 0.001) {
      throw new Error(`Erreur: stock disponible avec exclusion attendu=${initialStockDispo}, obtenu=${withExclusionStockDispo}`);
    }
    
    // 6. Modifier la livraison (augmenter la quantit√©)
    console.log('‚úèÔ∏è Modification de la livraison (quantit√©: 3 ‚Üí 5)...');
    const updateResponse = await fetch(`${BASE_URL}/api/deliveries/${delivery.id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        orderId: order.id,
        clientId: 1,
        deliveryDate: new Date().toISOString().split('T')[0],
        note: 'Livraison modifi√©e',
        items: [
          {
            idArticle: 1,
            qteLivree: '5', // Augmenter de 3 √† 5
            idlot: null,
            idzone: 1
          }
        ]
      })
    });
    
    if (!updateResponse.ok) {
      const errorText = await updateResponse.text();
      throw new Error(`Erreur modification livraison: ${updateResponse.status} - ${errorText}`);
    }
    
    const updatedDelivery = await updateResponse.json();
    console.log(`‚úÖ Livraison modifi√©e: ${updatedDelivery.code}`);
    
    // 7. V√©rifier le stock disponible apr√®s modification (sans exclusion)
    console.log('üìä V√©rification du stock disponible apr√®s modification (sans exclusion)...');
    const afterUpdateData = await fetch(`${BASE_URL}/api/deliveries/page-data?orderId=${order.id}`);
    const afterUpdate = await afterUpdateData.json();
    
    const afterUpdateArticle = afterUpdate.articles.find(a => a.id === 1);
    const afterUpdateStockDispo = afterUpdateArticle?.totalDispo || 0;
    console.log(`üìä Stock disponible apr√®s modification: ${afterUpdateStockDispo}`);
    
    // Le stock disponible devrait √™tre r√©duit de 5 (nouvelle r√©servation)
    const expectedStockAfterUpdate = initialStockDispo - 5;
    if (Math.abs(afterUpdateStockDispo - expectedStockAfterUpdate) > 0.001) {
      throw new Error(`Erreur: stock disponible apr√®s modification attendu=${expectedStockAfterUpdate}, obtenu=${afterUpdateStockDispo}`);
    }
    
    // 8. V√©rifier le stock disponible avec exclusion apr√®s modification
    console.log('üìä V√©rification du stock disponible avec exclusion apr√®s modification...');
    const withExclusionAfterUpdateData = await fetch(`${BASE_URL}/api/deliveries/page-data?orderId=${order.id}&excludeDeliveryId=${delivery.id}`);
    const withExclusionAfterUpdate = await withExclusionAfterUpdateData.json();
    
    const withExclusionAfterUpdateArticle = withExclusionAfterUpdate.articles.find(a => a.id === 1);
    const withExclusionAfterUpdateStockDispo = withExclusionAfterUpdateArticle?.totalDispo || 0;
    console.log(`üìä Stock disponible avec exclusion apr√®s modification: ${withExclusionAfterUpdateStockDispo}`);
    
    // Le stock disponible devrait √™tre le m√™me qu'initial (exclusion de la r√©servation)
    if (Math.abs(withExclusionAfterUpdateStockDispo - initialStockDispo) > 0.001) {
      throw new Error(`Erreur: stock disponible avec exclusion apr√®s modification attendu=${initialStockDispo}, obtenu=${withExclusionAfterUpdateStockDispo}`);
    }
    
    console.log('üéâ Test r√©ussi ! L\'exclusion des r√©servations fonctionne correctement.');
    console.log('üìã R√©sum√©:');
    console.log('   - Le stock disponible diminue lors de la cr√©ation d\'une livraison');
    console.log('   - Le stock disponible augmente quand on exclut la livraison du calcul');
    console.log('   - La modification de la livraison met √† jour correctement les r√©servations');
    console.log('   - L\'exclusion fonctionne aussi apr√®s modification');
    
  } catch (error) {
    console.error('‚ùå Test √©chou√©:', error.message);
    throw error;
  }
}

// Ex√©cuter le test si le script est appel√© directement
if (require.main === module) {
  testStockAvailableExclusion()
    .then(() => {
      console.log('‚úÖ Tous les tests sont pass√©s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Test √©chou√©:', error);
      process.exit(1);
    });
}

module.exports = { testStockAvailableExclusion };
