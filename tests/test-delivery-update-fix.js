/**
 * Test pour v√©rifier la correction de la mise √† jour des livraisons
 * 
 * Sc√©nario test√© selon l'exemple fourni :
 * - √âtat initial : Quantit√© command√©e=5, Quantit√© d√©j√† livr√©e=2, Quantit√© restante=3, Stock total=6, Stock disponible=4
 * - Nouvelle livraison X : Quantit√© √† livrer=2
 * - √âtat apr√®s insertion : Quantit√© command√©e=5, Quantit√© d√©j√† livr√©e=4, Quantit√© restante=1, Stock total=6, Stock disponible=2
 * - Modifier livraison X : Quantit√© √† livrer=1 (au lieu de 2)
 * - √âtat apr√®s modification : Quantit√© command√©e=5, Quantit√© d√©j√† livr√©e=3, Quantit√© restante=2, Stock total=6, Stock disponible=3
 */

const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3000';

async function testDeliveryUpdateFix() {
  console.log('üß™ Test de correction de la mise √† jour des livraisons');
  
  try {
    // 1. Cr√©er une commande de test
    console.log('üìù Cr√©ation d\'une commande de test...');
    const orderResponse = await fetch(`${BASE_URL}/api/orders`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        clientId: 1, // Supposons qu'un client existe
        deliveryDate: new Date().toISOString().split('T')[0],
        notes: 'Commande de test pour v√©rifier la mise √† jour des livraisons',
        items: [
          {
            articleId: 1, // Supposons qu'un article existe
            quantity: '5'
          }
        ]
      })
    });
    
    if (!orderResponse.ok) {
      throw new Error(`Erreur cr√©ation commande: ${orderResponse.status}`);
    }
    
    const order = await orderResponse.json();
    console.log(`‚úÖ Commande cr√©√©e: ${order.code} (ID: ${order.id})`);
    
    // 2. Cr√©er une premi√®re livraison partielle
    console.log('üì¶ Cr√©ation d\'une premi√®re livraison (quantit√©=2)...');
    const delivery1Response = await fetch(`${BASE_URL}/api/deliveries`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        orderId: order.id,
        clientId: 1,
        deliveryDate: new Date().toISOString().split('T')[0],
        note: 'Premi√®re livraison partielle',
        items: [
          {
            idArticle: 1,
            qteLivree: '2',
            idlot: null,
            idzone: 1 // Supposons qu'une zone existe
          }
        ]
      })
    });
    
    if (!delivery1Response.ok) {
      throw new Error(`Erreur cr√©ation premi√®re livraison: ${delivery1Response.status}`);
    }
    
    const delivery1 = await delivery1Response.json();
    console.log(`‚úÖ Premi√®re livraison cr√©√©e: ${delivery1.code} (ID: ${delivery1.id})`);
    
    // 3. V√©rifier l'√©tat apr√®s la premi√®re livraison
    console.log('üîç V√©rification de l\'√©tat apr√®s la premi√®re livraison...');
    const detailsAfterFirst = await fetch(`${BASE_URL}/api/orders/${order.id}/delivery-details`);
    const details1 = await detailsAfterFirst.json();
    
    const item1 = details1.items.find(i => i.articleId === 1);
    console.log(`üìä √âtat apr√®s premi√®re livraison:`);
    console.log(`   - Quantit√© command√©e: ${item1.quantityOrdered}`);
    console.log(`   - Quantit√© d√©j√† livr√©e: ${item1.quantityDelivered}`);
    console.log(`   - Quantit√© restante: ${item1.quantityRemaining}`);
    
    // V√©rifier que l'√©tat est correct
    if (item1.quantityDelivered !== 2) {
      throw new Error(`Erreur: quantit√© d√©j√† livr√©e attendue=2, obtenue=${item1.quantityDelivered}`);
    }
    if (item1.quantityRemaining !== 3) {
      throw new Error(`Erreur: quantit√© restante attendue=3, obtenue=${item1.quantityRemaining}`);
    }
    
    // 4. Cr√©er une deuxi√®me livraison (celle qu'on va modifier)
    console.log('üì¶ Cr√©ation d\'une deuxi√®me livraison (quantit√©=2)...');
    const delivery2Response = await fetch(`${BASE_URL}/api/deliveries`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        orderId: order.id,
        clientId: 1,
        deliveryDate: new Date().toISOString().split('T')[0],
        note: 'Deuxi√®me livraison √† modifier',
        items: [
          {
            idArticle: 1,
            qteLivree: '2',
            idlot: null,
            idzone: 1
          }
        ]
      })
    });
    
    if (!delivery2Response.ok) {
      throw new Error(`Erreur cr√©ation deuxi√®me livraison: ${delivery2Response.status}`);
    }
    
    const delivery2 = await delivery2Response.json();
    console.log(`‚úÖ Deuxi√®me livraison cr√©√©e: ${delivery2.code} (ID: ${delivery2.id})`);
    
    // 5. V√©rifier l'√©tat apr√®s la deuxi√®me livraison
    console.log('üîç V√©rification de l\'√©tat apr√®s la deuxi√®me livraison...');
    const detailsAfterSecond = await fetch(`${BASE_URL}/api/orders/${order.id}/delivery-details`);
    const details2 = await detailsAfterSecond.json();
    
    const item2 = details2.items.find(i => i.articleId === 1);
    console.log(`üìä √âtat apr√®s deuxi√®me livraison:`);
    console.log(`   - Quantit√© command√©e: ${item2.quantityOrdered}`);
    console.log(`   - Quantit√© d√©j√† livr√©e: ${item2.quantityDelivered}`);
    console.log(`   - Quantit√© restante: ${item2.quantityRemaining}`);
    
    // V√©rifier que l'√©tat est correct (toutes les livraisons comptent maintenant)
    if (item2.quantityDelivered !== 4) {
      throw new Error(`Erreur: quantit√© d√©j√† livr√©e attendue=4, obtenue=${item2.quantityDelivered}`);
    }
    if (item2.quantityRemaining !== 1) {
      throw new Error(`Erreur: quantit√© restante attendue=1, obtenue=${item2.quantityRemaining}`);
    }
    
    // 6. Modifier la deuxi√®me livraison (r√©duire la quantit√© de 2 √† 1)
    console.log('‚úèÔ∏è Modification de la deuxi√®me livraison (quantit√©: 2 ‚Üí 1)...');
    const updateResponse = await fetch(`${BASE_URL}/api/deliveries/${delivery2.id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        orderId: order.id,
        clientId: 1,
        deliveryDate: new Date().toISOString().split('T')[0],
        note: 'Deuxi√®me livraison modifi√©e',
        items: [
          {
            idArticle: 1,
            qteLivree: '1', // R√©duire de 2 √† 1
            idlot: null,
            idzone: 1
          }
        ]
      })
    });
    
    if (!updateResponse.ok) {
      const errorText = await updateResponse.text();
      throw new Error(`Erreur modification livraison: ${updateResponse.status} - ${errorText}`);
    }
    
    const updatedDelivery = await updateResponse.json();
    console.log(`‚úÖ Livraison modifi√©e: ${updatedDelivery.code}`);
    
    // 7. V√©rifier l'√©tat apr√®s modification (sans exclusion)
    console.log('üîç V√©rification de l\'√©tat apr√®s modification (sans exclusion)...');
    const detailsAfterUpdate = await fetch(`${BASE_URL}/api/orders/${order.id}/delivery-details`);
    const details3 = await detailsAfterUpdate.json();
    
    // 8. V√©rifier l'√©tat avec exclusion de la livraison modifi√©e
    console.log('üîç V√©rification de l\'√©tat avec exclusion de la livraison modifi√©e...');
    const detailsWithExclusion = await fetch(`${BASE_URL}/api/orders/${order.id}/delivery-details?excludeDeliveryId=${delivery2.id}`);
    const details4 = await detailsWithExclusion.json();
    
    const item3 = details3.items.find(i => i.articleId === 1);
    const item4 = details4.items.find(i => i.articleId === 1);
    
    console.log(`üìä √âtat apr√®s modification (sans exclusion):`);
    console.log(`   - Quantit√© command√©e: ${item3.quantityOrdered}`);
    console.log(`   - Quantit√© d√©j√† livr√©e: ${item3.quantityDelivered}`);
    console.log(`   - Quantit√© restante: ${item3.quantityRemaining}`);
    
    console.log(`üìä √âtat apr√®s modification (avec exclusion):`);
    console.log(`   - Quantit√© command√©e: ${item4.quantityOrdered}`);
    console.log(`   - Quantit√© d√©j√† livr√©e: ${item4.quantityDelivered}`);
    console.log(`   - Quantit√© restante: ${item4.quantityRemaining}`);
    
    // V√©rifier que l'√©tat est correct (sans exclusion, toutes les livraisons comptent)
    if (item3.quantityDelivered !== 4) {
      throw new Error(`Erreur: quantit√© d√©j√† livr√©e attendue=4, obtenue=${item3.quantityDelivered}`);
    }
    if (item3.quantityRemaining !== 1) {
      throw new Error(`Erreur: quantit√© restante attendue=1, obtenue=${item3.quantityRemaining}`);
    }
    
    // V√©rifier que l'√©tat est correct (avec exclusion, la livraison modifi√©e n'est pas compt√©e)
    if (item4.quantityDelivered !== 2) {
      throw new Error(`Erreur: quantit√© d√©j√† livr√©e avec exclusion attendue=2, obtenue=${item4.quantityDelivered}`);
    }
    if (item4.quantityRemaining !== 3) {
      throw new Error(`Erreur: quantit√© restante avec exclusion attendue=3, obtenue=${item4.quantityRemaining}`);
    }
    
    console.log('üéâ Test r√©ussi ! La correction fonctionne correctement.');
    console.log('üìã R√©sum√©:');
    console.log('   - Les quantit√©s d√©j√† livr√©es comptent toutes les livraisons');
    console.log('   - La livraison en cours de modification est exclue du calcul');
    console.log('   - Les quantit√©s restantes sont calcul√©es correctement');
    console.log('   - Le stock disponible exclut les r√©servations de la livraison en cours de modification');
    
  } catch (error) {
    console.error('‚ùå Test √©chou√©:', error.message);
    throw error;
  }
}

// Ex√©cuter le test si le script est appel√© directement
if (require.main === module) {
  testDeliveryUpdateFix()
    .then(() => {
      console.log('‚úÖ Tous les tests sont pass√©s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Test √©chou√©:', error);
      process.exit(1);
    });
}

module.exports = { testDeliveryUpdateFix };


// **etat initial (autres livraisons meme draft):
// Quantit√©_command√©e	Quantit√©_d√©j√†_livr√©e	Quantit√©_restante	Stock_total	Stock_disponible
// 5 2 3 6	4

// **nouvelle livraison X:
// etat intiale:
// Quantit√©_command√©e	Quantit√©_d√©j√†_livr√©e	Quantit√©_restante	Stock_total	Stock_disponible  Quantit√©_√†_livrer(input)
// 5 2 3 6	4 2
// etat apr√©s insertion:
// Quantit√©_command√©e	Quantit√©_d√©j√†_livr√©e	Quantit√©_restante	Stock_total	Stock_disponible
// 5 4 1 6	2

// **modifier livraison X:
// etat intiale:
// Quantit√©_command√©e	Quantit√©_d√©j√†_livr√©e	Quantit√©_restante	Stock_total	Stock_disponible  Quantit√©_√†_livrer(input)
// 5 2 3 6	4 1
// etat apr√©s modification:
// Quantit√©_command√©e	Quantit√©_d√©j√†_livr√©e	Quantit√©_restante	Stock_total	Stock_disponible
// 5 3 2 6	3
