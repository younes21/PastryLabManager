const BASE_URL = 'http://localhost:5000';

// Fonction utilitaire pour les requ√™tes avec timeout
async function fetchWithTimeout(url, options = {}, timeout = 10000) {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), timeout);
  
  try {
    const response = await fetch(url, {
      ...options,
      signal: controller.signal
    });
    clearTimeout(timeoutId);
    return response;
  } catch (error) {
    clearTimeout(timeoutId);
    throw error;
  }
}

// Test de l'API de disponibilit√© des articles pour les combinaisons multiples
async function testMultipleCombinations() {
  console.log('\nüß™ Test: Combinaisons multiples (lot, zone)...\n');

  try {
    // Test avec un article existant (ID 1)
    const articleId = 1;
    console.log(`üìä Test de disponibilit√© pour l'article ID ${articleId}...`);
    
    const response = await fetchWithTimeout(`${BASE_URL}/api/articles/${articleId}/availability`);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.log(`‚ùå Erreur HTTP ${response.status}: ${errorText}`);
      return;
    }
    
    const availabilityData = await response.json();
    console.log('‚úÖ Donn√©es de disponibilit√© r√©cup√©r√©es:');
    console.log(`   - Article: ${availabilityData.article?.name || 'N/A'} (ID: ${availabilityData.article?.id})`);
    console.log(`   - Type: ${availabilityData.article?.type || 'N/A'}`);
    console.log(`   - P√©rissable: ${availabilityData.article?.isPerishable ? 'Oui' : 'Non'}`);
    console.log(`   - Total disponible: ${availabilityData.summary?.totalAvailable || 0}`);
    
    // Analyser les combinaisons disponibles
    console.log('\nüìã Combinaisons disponibles (lot, zone):');
    if (availabilityData.availability && availabilityData.availability.length > 0) {
      const combinations = new Map();
      
      availabilityData.availability.forEach((item, index) => {
        const key = `${item.lotId || 'null'}-${item.storageZoneId}`;
        if (!combinations.has(key)) {
          combinations.set(key, {
            lotId: item.lotId,
            lotCode: item.lotCode,
            zoneId: item.storageZoneId,
            zoneDesignation: item.storageZoneDesignation,
            availableQuantity: item.availableQuantity,
            stockQuantity: item.stockQuantity
          });
        }
      });
      
      const uniqueCombinations = Array.from(combinations.values());
      console.log(`   - Nombre de combinaisons uniques: ${uniqueCombinations.length}`);
      
      uniqueCombinations.forEach((combo, index) => {
        console.log(`   ${index + 1}. Lot: ${combo.lotCode || 'Aucun'} | Zone: ${combo.zoneDesignation} | Disponible: ${combo.availableQuantity}`);
      });
      
      // Simuler des sc√©narios de r√©partition
      console.log('\nüéØ Sc√©narios de r√©partition:');
      
      // Sc√©nario 1: R√©partition sur une seule combinaison
      if (uniqueCombinations.length > 0) {
        const firstCombo = uniqueCombinations[0];
        const requestedQty = Math.min(50, firstCombo.availableQuantity);
        console.log(`   Sc√©nario 1: R√©partition sur 1 combinaison`);
        console.log(`     - Lot: ${firstCombo.lotCode || 'Aucun'}, Zone: ${firstCombo.zoneDesignation}`);
        console.log(`     - Quantit√© demand√©e: ${requestedQty}`);
        console.log(`     - Quantit√© disponible: ${firstCombo.availableQuantity}`);
        console.log(`     - ‚úÖ R√©partition possible: ${requestedQty <= firstCombo.availableQuantity ? 'Oui' : 'Non'}`);
      }
      
      // Sc√©nario 2: R√©partition sur plusieurs combinaisons
      if (uniqueCombinations.length > 1) {
        console.log(`   Sc√©nario 2: R√©partition sur ${Math.min(3, uniqueCombinations.length)} combinaisons`);
        let totalAvailable = 0;
        let totalRequested = 0;
        
        uniqueCombinations.slice(0, 3).forEach((combo, index) => {
          const qty = Math.min(20, combo.availableQuantity);
          totalAvailable += combo.availableQuantity;
          totalRequested += qty;
          console.log(`     - Combinaison ${index + 1}: Lot ${combo.lotCode || 'Aucun'}, Zone ${combo.zoneDesignation}, Quantit√©: ${qty}`);
        });
        
        console.log(`     - Total demand√©: ${totalRequested}`);
        console.log(`     - Total disponible: ${totalAvailable}`);
        console.log(`     - ‚úÖ R√©partition possible: ${totalRequested <= totalAvailable ? 'Oui' : 'Non'}`);
      }
      
      // Sc√©nario 3: Test de validation des doublons
      console.log(`   Sc√©nario 3: Test de validation des doublons`);
      const duplicateTest = [
        { lotId: uniqueCombinations[0]?.lotId, zoneId: uniqueCombinations[0]?.zoneId, quantity: 10 },
        { lotId: uniqueCombinations[0]?.lotId, zoneId: uniqueCombinations[0]?.zoneId, quantity: 15 }
      ];
      
      const combinationsSet = new Set();
      let hasDuplicates = false;
      
      duplicateTest.forEach((item, index) => {
        const key = `${item.lotId}-${item.zoneId}`;
        if (combinationsSet.has(key)) {
          hasDuplicates = true;
          console.log(`     - ‚ùå Doublon d√©tect√© √† la ligne ${index + 1}: ${key}`);
        } else {
          combinationsSet.add(key);
          console.log(`     - ‚úÖ Combinaison unique √† la ligne ${index + 1}: ${key}`);
        }
      });
      
      console.log(`     - R√©sultat: ${hasDuplicates ? '‚ùå Doublons d√©tect√©s' : '‚úÖ Aucun doublon'}`);
      
    } else {
      console.log('   Aucune combinaison disponible');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test des combinaisons multiples:', error.message);
  }
}

// Test avec plusieurs articles pour v√©rifier la diversit√© des combinaisons
async function testMultipleArticlesCombinations() {
  console.log('\nüß™ Test: Combinaisons sur plusieurs articles...\n');

  const articleIds = [1, 2, 3, 4, 5]; // Test avec les premiers articles
  
  for (const articleId of articleIds) {
    try {
      console.log(`üìä Test article ID ${articleId}...`);
      
      const response = await fetchWithTimeout(`${BASE_URL}/api/articles/${articleId}/availability`);
      
      if (!response.ok) {
        console.log(`   ‚ùå Article ${articleId} non trouv√© ou erreur`);
        continue;
      }
      
      const data = await response.json();
      
      // Compter les combinaisons uniques
      const combinationsMap = new Map();
      
      data.availability?.forEach(item => {
        const key = `${item.lotId || 'null'}-${item.storageZoneId}`;
        if (!combinationsMap.has(key)) {
          combinationsMap.set(key, {
            lotCode: item.lotCode,
            zoneDesignation: item.storageZoneDesignation,
            availableQuantity: item.availableQuantity
          });
        }
      });
      
      const uniqueCombinations = Array.from(combinationsMap.values());
      const totalAvailable = uniqueCombinations.reduce((sum, combo) => sum + combo.availableQuantity, 0);
      
      console.log(`   ‚úÖ ${data.article?.name || 'Article'} - Combinaisons: ${uniqueCombinations.length}, Total disponible: ${totalAvailable}`);
      
      // Afficher les premi√®res combinaisons
      if (uniqueCombinations.length > 0) {
        console.log(`     Premi√®res combinaisons:`);
        uniqueCombinations.slice(0, 3).forEach((combo, idx) => {
          console.log(`       ${idx + 1}. Lot: ${combo.lotCode || 'Aucun'}, Zone: ${combo.zoneDesignation}, Dispo: ${combo.availableQuantity}`);
        });
        if (uniqueCombinations.length > 3) {
          console.log(`       ... et ${uniqueCombinations.length - 3} autres`);
        }
      }
      
    } catch (error) {
      console.log(`   ‚ùå Erreur pour l'article ${articleId}: ${error.message}`);
    }
  }
}

// Fonction principale
async function runTests() {
  console.log('üöÄ D√©marrage des tests des combinaisons multiples...\n');
  
  try {
    await testMultipleCombinations();
    await testMultipleArticlesCombinations();
    
    console.log('\n‚úÖ Tests termin√©s !');
    console.log('\nüìù R√©sum√© des modifications:');
    console.log('   - ‚úÖ S√©lection de plusieurs combinaisons (lot, zone)');
    console.log('   - ‚úÖ Validation de l\'unicit√© des combinaisons');
    console.log('   - ‚úÖ V√©rification de la somme des quantit√©s');
    console.log('   - ‚úÖ Interface utilisateur pour ajouter/supprimer des lignes');
    console.log('   - ‚úÖ Affichage des listes distinctes de lots et zones');
    console.log('   - ‚úÖ Validation de la disponibilit√© en stock');
    
    console.log('\nüéØ Fonctionnalit√©s impl√©ment√©es:');
    console.log('   - L\'utilisateur peut ajouter plusieurs lignes de r√©partition');
    console.log('   - Chaque ligne repr√©sente une combinaison unique (lot, zone)');
    console.log('   - La quantit√© totale doit √©galer la quantit√© demand√©e');
    console.log('   - Validation des doublons de combinaisons');
    console.log('   - V√©rification de la disponibilit√© en stock pour chaque combinaison');
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message);
  }
}

// Ex√©cuter les tests
runTests();
