/**
 * Test pour v√©rifier que la cr√©ation d'une nouvelle livraison fonctionne correctement
 * avec la correction de updateItemQuantity
 */

const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3000';

async function testNewDeliveryCreation() {
  console.log('üß™ Test de cr√©ation d\'une nouvelle livraison');
  
  try {
    // 1. Cr√©er une commande de test
    console.log('üìù Cr√©ation d\'une commande de test...');
    const orderResponse = await fetch(`${BASE_URL}/api/orders`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        clientId: 1,
        deliveryDate: new Date().toISOString().split('T')[0],
        notes: 'Commande de test pour v√©rifier la cr√©ation de livraison',
        items: [
          {
            articleId: 1,
            quantity: '10'
          }
        ]
      })
    });
    
    if (!orderResponse.ok) {
      throw new Error(`Erreur cr√©ation commande: ${orderResponse.status}`);
    }
    
    const order = await orderResponse.json();
    console.log(`‚úÖ Commande cr√©√©e: ${order.code} (ID: ${order.id})`);
    
    // 2. R√©cup√©rer les d√©tails de livraison de la commande (sans exclusion)
    console.log('üìä R√©cup√©ration des d√©tails de livraison...');
    const deliveryDetailsResponse = await fetch(`${BASE_URL}/api/orders/${order.id}/delivery-details`);
    const deliveryDetails = await deliveryDetailsResponse.json();
    
    const orderItem = deliveryDetails.items.find(i => i.articleId === 1);
    console.log(`üìä D√©tails de livraison:`);
    console.log(`   - Quantit√© command√©e: ${orderItem.quantityOrdered}`);
    console.log(`   - Quantit√© d√©j√† livr√©e: ${orderItem.quantityDelivered}`);
    console.log(`   - Quantit√© restante: ${orderItem.quantityRemaining}`);
    
    // 3. Cr√©er une nouvelle livraison
    console.log('üì¶ Cr√©ation d\'une nouvelle livraison...');
    const deliveryResponse = await fetch(`${BASE_URL}/api/deliveries`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        orderId: order.id,
        clientId: 1,
        deliveryDate: new Date().toISOString().split('T')[0],
        note: 'Nouvelle livraison de test',
        items: [
          {
            idArticle: 1,
            qteLivree: '3',
            idlot: null,
            idzone: 1
          }
        ]
      })
    });
    
    if (!deliveryResponse.ok) {
      const errorText = await deliveryResponse.text();
      throw new Error(`Erreur cr√©ation livraison: ${deliveryResponse.status} - ${errorText}`);
    }
    
    const delivery = await deliveryResponse.json();
    console.log(`‚úÖ Livraison cr√©√©e: ${delivery.code} (ID: ${delivery.id})`);
    
    // 4. V√©rifier les d√©tails de livraison apr√®s cr√©ation
    console.log('üìä V√©rification des d√©tails apr√®s cr√©ation...');
    const afterCreationResponse = await fetch(`${BASE_URL}/api/orders/${order.id}/delivery-details`);
    const afterCreationDetails = await afterCreationResponse.json();
    
    const afterCreationItem = afterCreationDetails.items.find(i => i.articleId === 1);
    console.log(`üìä D√©tails apr√®s cr√©ation:`);
    console.log(`   - Quantit√© command√©e: ${afterCreationItem.quantityOrdered}`);
    console.log(`   - Quantit√© d√©j√† livr√©e: ${afterCreationItem.quantityDelivered}`);
    console.log(`   - Quantit√© restante: ${afterCreationItem.quantityRemaining}`);
    
    // V√©rifier que la quantit√© d√©j√† livr√©e a augment√©
    if (afterCreationItem.quantityDelivered !== orderItem.quantityDelivered + 3) {
      throw new Error(`Erreur: quantit√© d√©j√† livr√©e attendue=${orderItem.quantityDelivered + 3}, obtenue=${afterCreationItem.quantityDelivered}`);
    }
    
    // V√©rifier que la quantit√© restante a diminu√©
    if (afterCreationItem.quantityRemaining !== orderItem.quantityRemaining - 3) {
      throw new Error(`Erreur: quantit√© restante attendue=${orderItem.quantityRemaining - 3}, obtenue=${afterCreationItem.quantityRemaining}`);
    }
    
    // 5. Cr√©er une deuxi√®me livraison pour tester la limite
    console.log('üì¶ Cr√©ation d\'une deuxi√®me livraison...');
    const delivery2Response = await fetch(`${BASE_URL}/api/deliveries`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        orderId: order.id,
        clientId: 1,
        deliveryDate: new Date().toISOString().split('T')[0],
        note: 'Deuxi√®me livraison de test',
        items: [
          {
            idArticle: 1,
            qteLivree: '5', // 3 + 5 = 8, ce qui d√©passe les 10 command√©s
            idlot: null,
            idzone: 1
          }
        ]
      })
    });
    
    if (!delivery2Response.ok) {
      const errorText = await delivery2Response.text();
      throw new Error(`Erreur cr√©ation deuxi√®me livraison: ${delivery2Response.status} - ${errorText}`);
    }
    
    const delivery2 = await delivery2Response.json();
    console.log(`‚úÖ Deuxi√®me livraison cr√©√©e: ${delivery2.code} (ID: ${delivery2.id})`);
    
    // 6. V√©rifier les d√©tails apr√®s la deuxi√®me livraison
    console.log('üìä V√©rification des d√©tails apr√®s deuxi√®me livraison...');
    const afterSecondResponse = await fetch(`${BASE_URL}/api/orders/${order.id}/delivery-details`);
    const afterSecondDetails = await afterSecondResponse.json();
    
    const afterSecondItem = afterSecondDetails.items.find(i => i.articleId === 1);
    console.log(`üìä D√©tails apr√®s deuxi√®me livraison:`);
    console.log(`   - Quantit√© command√©e: ${afterSecondItem.quantityOrdered}`);
    console.log(`   - Quantit√© d√©j√† livr√©e: ${afterSecondItem.quantityDelivered}`);
    console.log(`   - Quantit√© restante: ${afterSecondItem.quantityRemaining}`);
    
    // V√©rifier que la quantit√© d√©j√† livr√©e est maintenant de 8 (3 + 5)
    if (afterSecondItem.quantityDelivered !== 8) {
      throw new Error(`Erreur: quantit√© d√©j√† livr√©e attendue=8, obtenue=${afterSecondItem.quantityDelivered}`);
    }
    
    // V√©rifier que la quantit√© restante est maintenant de 2 (10 - 8)
    if (afterSecondItem.quantityRemaining !== 2) {
      throw new Error(`Erreur: quantit√© restante attendue=2, obtenue=${afterSecondItem.quantityRemaining}`);
    }
    
    console.log('üéâ Test r√©ussi ! La cr√©ation de nouvelles livraisons fonctionne correctement.');
    console.log('üìã R√©sum√©:');
    console.log('   - La fonction updateItemQuantity fonctionne pour les nouvelles livraisons');
    console.log('   - Les quantit√©s d√©j√† livr√©es et restantes sont calcul√©es correctement');
    console.log('   - Les limites de commande sont respect√©es');
    
  } catch (error) {
    console.error('‚ùå Test √©chou√©:', error.message);
    throw error;
  }
}

// Ex√©cuter le test si le script est appel√© directement
if (require.main === module) {
  testNewDeliveryCreation()
    .then(() => {
      console.log('‚úÖ Tous les tests sont pass√©s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Test √©chou√©:', error);
      process.exit(1);
    });
}

module.exports = { testNewDeliveryCreation };
