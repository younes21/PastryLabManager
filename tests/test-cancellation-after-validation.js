// Test de l'annulation APR√àS validation
import axios from 'axios';

const BASE_URL = 'http://localhost:5000/api';

async function testCancellationAfterValidation() {
  console.log('üß™ Test de l\'annulation APR√àS validation...\n');

  try {
    // 1. Cr√©er une nouvelle livraison
    console.log('üîÑ Cr√©ation d\'une nouvelle livraison...');
    const testDelivery = {
      orderId: 13,
      deliveryAddress: '456 Test Avenue, Ville Test',
      deliveryNotes: 'Test d\'annulation APR√àS validation',
      status: 'pending',
      createdBy: 1
    };
    
    const deliveryResponse = await axios.post(`${BASE_URL}/deliveries`, testDelivery);
    const deliveryId = deliveryResponse.data.id;
    console.log(`‚úÖ Livraison cr√©√©e: ${deliveryResponse.data.code} (ID: ${deliveryId})`);

    // 2. Cr√©er des r√©servations
    console.log('\nüîÑ Cr√©ation des r√©servations de stock...');
    const orderItems = [
      { id: 19, articleId: 36, quantity: '1.000' },
      { id: 20, articleId: 37, quantity: '1.000' }
    ];
    
    const reservationsResponse = await axios.post(`${BASE_URL}/deliveries/${deliveryId}/reservations`, { 
      orderItems 
    });
    console.log(`‚úÖ R√©servations cr√©√©es: ${reservationsResponse.data.length} r√©servations`);

    // 3. V√©rifier le stock avant validation
    console.log('\nüìä Stock disponible avant validation:');
    const articles = [36, 37];
    for (const articleId of articles) {
      const stockResponse = await axios.get(`${BASE_URL}/articles/${articleId}/available-stock`);
      console.log(`   Article ${articleId}: Stock disponible = ${stockResponse.data.availableStock}`);
    }

    // 4. Valider la livraison
    console.log('\nüîÑ Validation de la livraison...');
    const validateResponse = await axios.post(`${BASE_URL}/deliveries/${deliveryId}/validate`);
    console.log(`‚úÖ Livraison valid√©e: ${validateResponse.data.isValidated ? 'OUI' : 'NON'}`);

    // 5. V√©rifier le stock apr√®s validation
    console.log('\nüìä Stock disponible apr√®s validation:');
    for (const articleId of articles) {
      const stockResponse = await axios.get(`${BASE_URL}/articles/${articleId}/available-stock`);
      console.log(`   Article ${articleId}: Stock disponible = ${stockResponse.data.availableStock}`);
    }

    // 6. Test 1: Annulation avec retour au stock
    console.log('\nüîÑ Test 1: Annulation avec retour au stock...');
    const cancelReturnResponse = await axios.post(`${BASE_URL}/deliveries/${deliveryId}/cancel-after-validation`, {
      reason: 'Produits retourn√©s en bon √©tat',
      isReturnToStock: true
    });
    console.log(`‚úÖ Livraison annul√©e avec retour au stock: ${cancelReturnResponse.data.status}`);

    // 7. V√©rifier le stock apr√®s retour
    console.log('\nüìä Stock disponible apr√®s retour au stock:');
    for (const articleId of articles) {
      const stockResponse = await axios.get(`${BASE_URL}/articles/${articleId}/available-stock`);
      console.log(`   Article ${articleId}: Stock disponible = ${stockResponse.data.availableStock}`);
    }

    // 8. Cr√©er une deuxi√®me livraison pour tester le rebut
    console.log('\nüîÑ Cr√©ation d\'une deuxi√®me livraison pour test rebut...');
    const testDelivery2 = {
      orderId: 13,
      deliveryAddress: '789 Test Boulevard, Ville Test',
      deliveryNotes: 'Test d\'annulation avec rebut',
      status: 'pending',
      createdBy: 1
    };
    
    const deliveryResponse2 = await axios.post(`${BASE_URL}/deliveries`, testDelivery2);
    const deliveryId2 = deliveryResponse2.data.id;
    console.log(`‚úÖ Livraison cr√©√©e: ${deliveryResponse2.data.code} (ID: ${deliveryId2})`);

    // 9. Cr√©er des r√©servations et valider
    await axios.post(`${BASE_URL}/deliveries/${deliveryId2}/reservations`, { orderItems });
    await axios.post(`${BASE_URL}/deliveries/${deliveryId2}/validate`);
    console.log('‚úÖ Deuxi√®me livraison valid√©e');

    // 10. Test 2: Annulation avec rebut
    console.log('\nüîÑ Test 2: Annulation avec rebut...');
    const cancelWasteResponse = await axios.post(`${BASE_URL}/deliveries/${deliveryId2}/cancel-after-validation`, {
      reason: 'Produits endommag√©s lors du transport',
      isReturnToStock: false
    });
    console.log(`‚úÖ Livraison annul√©e avec rebut: ${cancelWasteResponse.data.status}`);

    // 11. V√©rifier le stock apr√®s rebut
    console.log('\nüìä Stock disponible apr√®s rebut:');
    for (const articleId of articles) {
      const stockResponse = await axios.get(`${BASE_URL}/articles/${articleId}/available-stock`);
      console.log(`   Article ${articleId}: Stock disponible = ${stockResponse.data.availableStock}`);
    }

    console.log('\nüéâ Tous les tests d\'annulation APR√àS validation ont r√©ussi !');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:');
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Data:', error.response.data);
    } else if (error.request) {
      console.error('   Request error:', error.request);
    } else {
      console.error('   Error:', error.message);
    }
  }
}

testCancellationAfterValidation();
