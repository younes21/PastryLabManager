/**
 * Script de test pour le syst√®me de r√©servations d'ingr√©dients
 * 
 * Ce script teste les fonctionnalit√©s principales :
 * 1. Cr√©ation d'une pr√©paration programm√©e
 * 2. V√©rification des r√©servations cr√©√©es
 * 3. Changement de statut et lib√©ration des r√©servations
 * 4. Suppression et lib√©ration automatique
 */

import { fileURLToPath } from 'url';
import { dirname } from 'path';

// Configuration
const BASE_URL = 'http://localhost:5000/api';
const TEST_EMAIL = 'test@example.com';
const TEST_PASSWORD = 'testpassword';
const TEST_OPERATION = {
  type: 'preparation',
  status: 'programmed',
  scheduledDate: new Date().toISOString(),
  notes: 'Test de r√©servations automatiques'
};

const TEST_ITEMS = [
  {
    articleId: 21, // "tartes aux pommes" - a real product with a recipe
    quantity: '10',
    notes: 'Test item'
  }
];

// Helper function to make fetch requests with timeout
async function fetchWithTimeout(url, options = {}, timeout = 10000) {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), timeout);
  
  try {
    const response = await fetch(url, {
      ...options,
      signal: controller.signal
    });
    clearTimeout(timeoutId);
    return response;
  } catch (error) {
    clearTimeout(timeoutId);
    if (error.name === 'AbortError') {
      throw new Error(`Request timeout after ${timeout}ms`);
    }
    throw error;
  }
}

// Fonctions de test
async function testReservationSystem() {
  console.log('üß™ D√©marrage des tests du syst√®me de r√©servations...\n');

  try {
    // Test 1: Cr√©er une pr√©paration
    console.log('üìù Test 1: Cr√©ation d\'une pr√©paration...');
    const operationResponse = await fetchWithTimeout(`${BASE_URL}/inventory-operations`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        operation: TEST_OPERATION,
        items: TEST_ITEMS
      })
    });
    
    if (!operationResponse.ok) {
      throw new Error(`HTTP error! status: ${operationResponse.status}`);
    }
    const operationData = await operationResponse.json();
    const operationId = operationData.operation.id;
    console.log(`‚úÖ Pr√©paration cr√©√©e avec l'ID: ${operationId}`);

    // Test 2: V√©rifier que les r√©servations sont cr√©√©es automatiquement
    console.log('\nüîç Test 2: V√©rification des r√©servations automatiques...');
    await new Promise(resolve => setTimeout(resolve, 1000)); // Attendre la cr√©ation des r√©servations
    
    const reservationsResponse = await fetchWithTimeout(`${BASE_URL}/inventory-operations/${operationId}/reservations`);
    const reservations = await reservationsResponse.json();
    
    if (reservations.length > 0) {
      console.log(`‚úÖ ${reservations.length} r√©servation(s) cr√©√©e(s) automatiquement`);
      reservations.forEach((res, index) => {
        console.log(`   - R√©servation ${index + 1}: ${res.article?.name} - ${res.reservedQuantity} ${res.article?.unit}`);
      });
    } else {
      console.log('‚ö†Ô∏è  Aucune r√©servation cr√©√©e automatiquement');
    }

    // Test 3: Changer le statut √† "en cours" et v√©rifier la lib√©ration
    console.log('\n‚ñ∂Ô∏è  Test 3: Changement de statut et lib√©ration des r√©servations...');
    await fetchWithTimeout(`${BASE_URL}/inventory-operations/${operationId}`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        status: 'in_progress',
        startedAt: new Date().toISOString()
      })
    });
    
    console.log('‚úÖ Statut chang√© √† "en cours"');
    
    // Attendre la lib√©ration des r√©servations
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const reservationsAfterStart = await fetchWithTimeout(`${BASE_URL}/inventory-operations/${operationId}/reservations`);
    const activeReservations = (await reservationsAfterStart.json()).filter(r => r.status === 'reserved');
    
    if (activeReservations.length === 0) {
      console.log('‚úÖ Toutes les r√©servations ont √©t√© lib√©r√©es automatiquement');
    } else {
      console.log(`‚ö†Ô∏è  ${activeReservations.length} r√©servation(s) encore active(s)`);
    }

    // Test 4: Supprimer l'op√©ration et v√©rifier la lib√©ration
    console.log('\nüóëÔ∏è  Test 4: Suppression de l\'op√©ration...');
    await fetchWithTimeout(`${BASE_URL}/inventory-operations/${operationId}`, {
      method: 'DELETE'
    });
    console.log('‚úÖ Op√©ration supprim√©e');
    
    // V√©rifier que les r√©servations sont bien supprim√©es
    try {
      await fetchWithTimeout(`${BASE_URL}/inventory-operations/${operationId}/reservations`);
      console.log('‚ö†Ô∏è  Les r√©servations sont encore accessibles apr√®s suppression');
    } catch (error) {
      if (error.response?.status === 404) {
        console.log('‚úÖ R√©servations correctement supprim√©es avec l\'op√©ration');
      } else {
        console.log('‚ö†Ô∏è  Erreur inattendue lors de la v√©rification des r√©servations');
      }
    }

    console.log('\nüéâ Tous les tests sont termin√©s !');

  } catch (error) {
    console.error('\n‚ùå Erreur lors des tests:', error.message);
    if (error.response) {
      console.error('D√©tails:', error.response.data);
    }
  }
}

// Test des endpoints de r√©servation
async function testReservationEndpoints() {
  console.log('\nüîß Test des endpoints de r√©servation...\n');

  try {
    // Cr√©er une nouvelle op√©ration pour les tests
    const operationResponse = await fetchWithTimeout(`${BASE_URL}/inventory-operations`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        operation: { ...TEST_OPERATION, status: 'draft' },
        items: TEST_ITEMS
      })
    });
    
    if (!operationResponse.ok) {
      throw new Error(`HTTP error! status: ${operationResponse.status}`);
    }
    const operationData = await operationResponse.json();
    const operationId = operationData.operation.id;
    console.log(`üìù Op√©ration de test cr√©√©e: ${operationId}`);

          // Test: Cr√©er des r√©servations manuellement
      console.log('\nüìã Test: Cr√©ation manuelle de r√©servations...');
      const manualReservations = await fetchWithTimeout(`${BASE_URL}/inventory-operations/${operationId}/reservations`);
      const manualReservationsData = await manualReservations.json();
      console.log(`‚úÖ ${manualReservationsData.reservations.length} r√©servation(s) cr√©√©e(s) manuellement`);

      // Test: R√©cup√©rer les r√©servations
      console.log('\nüìñ Test: R√©cup√©ration des r√©servations...');
      const getReservations = await fetchWithTimeout(`${BASE_URL}/inventory-operations/${operationId}/reservations`);
      const getReservationsData = await getReservations.json();
      console.log(`‚úÖ ${getReservationsData.length} r√©servation(s) r√©cup√©r√©e(s)`);

      // Test: Lib√©rer une r√©servation sp√©cifique
      if (getReservationsData.length > 0) {
        console.log('\nüîì Test: Lib√©ration d\'une r√©servation sp√©cifique...');
        const reservationId = getReservationsData[0].id;
        await fetchWithTimeout(`${BASE_URL}/stock-reservations/${reservationId}/release`);
        console.log(`‚úÖ R√©servation ${reservationId} lib√©r√©e`);
      }

    // Nettoyer
    await fetchWithTimeout(`${BASE_URL}/inventory-operations/${operationId}`, {
      method: 'DELETE'
    });
    console.log('\nüßπ Op√©ration de test supprim√©e');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests des endpoints:', error.message);
  }
}

// Test simple de cr√©ation d'op√©ration
async function testSimpleOperationCreation() {
  console.log('üß™ Test simple: Cr√©ation d\'une op√©ration sans items...\n');

  try {
    const simpleOperation = {
      type: 'preparation',
      status: 'programmed',
      notes: 'Test simple'
    };

    console.log('üìù Tentative de cr√©ation d\'une op√©ration simple...');
    console.log('Donn√©es envoy√©es:', JSON.stringify(simpleOperation, null, 2));
    
    const response = await fetchWithTimeout(`${BASE_URL}/inventory-operations`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(simpleOperation)
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.log(`‚ùå Erreur HTTP ${response.status}: ${errorText}`);
      return;
    }
    
    const result = await response.json();
    console.log(`‚úÖ Op√©ration simple cr√©√©e avec l'ID: ${result.id}`);
    
    // Attendre un peu et v√©rifier que l'op√©ration existe toujours
    console.log('‚è≥ Attente de 2 secondes...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const checkResponse = await fetchWithTimeout(`${BASE_URL}/inventory-operations/${result.id}`);
    if (checkResponse.ok) {
      const checkResult = await checkResponse.json();
      console.log(`‚úÖ Op√©ration ${result.id} existe toujours:`, checkResult.type, checkResult.status);
    } else {
      console.log(`‚ùå Op√©ration ${result.id} n'existe plus apr√®s 2 secondes`);
    }
    
    // Nettoyer
    await fetchWithTimeout(`${BASE_URL}/inventory-operations/${result.id}`, {
      method: 'DELETE'
    });
    console.log('üßπ Op√©ration simple supprim√©e');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test simple:', error.message);
  }
}

// Test de cr√©ation d'op√©ration avec items (nouveau format)
async function testOperationWithItems() {
  console.log('üß™ Test: Cr√©ation d\'une op√©ration avec items (nouveau format)...\n');

  try {
    const operationWithItems = {
      operation: {
        type: 'preparation',
        status: 'programmed',
        notes: 'Test avec items'
      },
      items: [
        {
          articleId: 21, // "tartes aux pommes"
          quantity: '10',
          notes: 'Test item'
        }
      ]
    };

    console.log('üìù Tentative de cr√©ation d\'une op√©ration avec items...');
    console.log('Donn√©es envoy√©es:', JSON.stringify(operationWithItems, null, 2));
    
    const response = await fetchWithTimeout(`${BASE_URL}/inventory-operations`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(operationWithItems)
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.log(`‚ùå Erreur HTTP ${response.status}: ${errorText}`);
      return;
    }
    
    const result = await response.json();
    console.log(`‚úÖ Op√©ration avec items cr√©√©e:`, result);
    
    // Nettoyer
    if (result.operation && result.operation.id) {
      await fetchWithTimeout(`${BASE_URL}/inventory-operations/${result.operation.id}`, {
        method: 'DELETE'
      });
      console.log('üßπ Op√©ration avec items supprim√©e');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test avec items:', error.message);
  }
}

// Test de cascade delete pour les r√©servations
async function testCascadeDelete() {
  console.log('üß™ Test: Cascade delete des r√©servations...\n');

  try {
    // Cr√©er une op√©ration avec items pour g√©n√©rer des r√©servations
    const operationWithItems = {
      operation: {
        type: 'preparation',
        status: 'programmed',
        notes: 'Test cascade delete'
      },
      items: [
        {
          articleId: 21, // "tartes aux pommes"
          quantity: '5',
          notes: 'Test cascade delete'
        }
      ]
    };

    console.log('üìù Cr√©ation d\'une op√©ration avec items...');
    const response = await fetchWithTimeout(`${BASE_URL}/inventory-operations`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(operationWithItems)
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.log(`‚ùå Erreur HTTP ${response.status}: ${errorText}`);
      return;
    }
    
    const result = await response.json();
    const operationId = result.id;
    console.log(`‚úÖ Op√©ration cr√©√©e avec l'ID: ${operationId}`);
    
    // Attendre un peu pour que les r√©servations soient cr√©√©es
    console.log('‚è≥ Attente de 2 secondes pour la cr√©ation des r√©servations...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // V√©rifier que les r√©servations existent
    const reservationsResponse = await fetchWithTimeout(`${BASE_URL}/inventory-operations/${operationId}/reservations`);
    const reservations = await reservationsResponse.json();
    console.log(`üìã ${reservations.length} r√©servation(s) trouv√©e(s) pour l'op√©ration ${operationId}`);
    
    if (reservations.length > 0) {
      reservations.forEach((res, index) => {
        console.log(`   - R√©servation ${index + 1}: Article ${res.articleId} - ${res.reservedQuantity} (${res.reservationType})`);
      });
      
      // Maintenant supprimer l'op√©ration
      console.log(`\nüóëÔ∏è  Suppression de l'op√©ration ${operationId}...`);
      const deleteResponse = await fetchWithTimeout(`${BASE_URL}/inventory-operations/${operationId}`, {
        method: 'DELETE'
      });
      
      if (deleteResponse.ok) {
        console.log('‚úÖ Op√©ration supprim√©e');
        
        // Attendre un peu pour que le cascade delete se propage
        console.log('‚è≥ Attente de 1 seconde pour le cascade delete...');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // V√©rifier que les r√©servations ont √©t√© supprim√©es automatiquement
        try {
          const checkReservationsResponse = await fetchWithTimeout(`${BASE_URL}/inventory-operations/${operationId}/reservations`);
          const remainingReservations = await checkReservationsResponse.json();
          
          if (remainingReservations.length === 0) {
            console.log('‚úÖ Cascade delete fonctionne: toutes les r√©servations ont √©t√© supprim√©es automatiquement');
          } else {
            console.log(`‚ö†Ô∏è  Cascade delete ne fonctionne pas: ${remainingReservations.length} r√©servation(s) encore pr√©sente(s)`);
          }
        } catch (error) {
          if (error.message.includes('404')) {
            console.log('‚úÖ Cascade delete fonctionne: l\'op√©ration et ses r√©servations ont √©t√© supprim√©s');
          } else {
            console.log('‚ö†Ô∏è  Erreur lors de la v√©rification des r√©servations:', error.message);
          }
        }
      } else {
        console.log(`‚ùå Erreur lors de la suppression: ${deleteResponse.status}`);
      }
    } else {
      console.log('‚ö†Ô∏è  Aucune r√©servation cr√©√©e, impossible de tester le cascade delete');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de cascade delete:', error.message);
  }
}

// Fonction principale
async function runAllTests() {
  console.log('üöÄ D√©marrage des tests complets du syst√®me de r√©servations\n');
  
  await testReservationSystem();
  await testReservationEndpoints();
  await testSimpleOperationCreation(); // Add this line to run the new test
  await testOperationWithItems(); // Add this line to run the new test
  await testCascadeDelete(); // Add this line to run the new test
  
  console.log('\n‚ú® Tests termin√©s !');
}

// Ex√©cuter les tests directement
console.log('üöÄ D√©marrage des tests du syst√®me de r√©servations...');
console.log('BASE_URL:', BASE_URL);

// Test simple d'abord
testSimpleOperationCreation().then(() => {
  console.log('Test simple termin√©');
}).catch(console.error);

// Puis les tests complets
runAllTests().catch(console.error);

export {
  testReservationSystem,
  testReservationEndpoints,
  runAllTests
};
