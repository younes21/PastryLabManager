// Test du composant de r√©partition des livraisons
console.log('üß™ Test du composant DeliverySplitModal...\n');

// Simuler les donn√©es de test
const mockAvailabilityData = {
  article: {
    id: 1,
    name: "Tarte fraise",
    code: "PRD-000001",
    isPerishable: true,
    type: "product"
  },
  availability: [
    {
      lotId: 1,
      lotCode: "LOT-001",
      lotExpirationDate: "2024-12-31",
      storageZoneId: 1,
      storageZoneCode: "ZON-001",
      storageZoneDesignation: "Cong√©lateur",
      stockQuantity: 40,
      reservedQuantity: 20,
      availableQuantity: 20,
      isPerishable: true,
      requiresLotSelection: true,
      requiresZoneSelection: false
    },
    {
      lotId: 2,
      lotCode: "LOT-002",
      lotExpirationDate: "2024-12-25",
      storageZoneId: 2,
      storageZoneCode: "ZON-002",
      storageZoneDesignation: "R√©frig√©rateur",
      stockQuantity: 30,
      reservedQuantity: 10,
      availableQuantity: 20,
      isPerishable: true,
      requiresLotSelection: true,
      requiresZoneSelection: true
    }
  ],
  summary: {
    totalStock: 70,
    totalReserved: 30,
    totalAvailable: 40,
    requiresLotSelection: true,
    requiresZoneSelection: true,
    canDirectDelivery: false
  }
};

// Test des validations
const testValidations = () => {
  console.log('1Ô∏è‚É£ Test des validations...');
  
  // Test 1: Quantit√© totale correcte
  const splits1 = [
    { lotId: 1, fromStorageZoneId: 1, quantity: 20 },
    { lotId: 2, fromStorageZoneId: 2, quantity: 20 }
  ];
  
  const totalQuantity1 = splits1.reduce((sum, split) => sum + split.quantity, 0);
  const requestedQuantity = 40;
  
  if (Math.abs(totalQuantity1 - requestedQuantity) < 0.001) {
    console.log('‚úÖ Validation quantit√© totale: OK');
  } else {
    console.log('‚ùå Validation quantit√© totale: √âCHEC');
  }
  
  // Test 2: S√©lections obligatoires
  const hasRequiredSelections = splits1.every(split => 
    split.lotId !== null && split.fromStorageZoneId !== null
  );
  
  if (hasRequiredSelections) {
    console.log('‚úÖ Validation s√©lections obligatoires: OK');
  } else {
    console.log('‚ùå Validation s√©lections obligatoires: √âCHEC');
  }
  
  // Test 3: Quantit√©s positives
  const hasPositiveQuantities = splits1.every(split => split.quantity > 0);
  
  if (hasPositiveQuantities) {
    console.log('‚úÖ Validation quantit√©s positives: OK');
  } else {
    console.log('‚ùå Validation quantit√©s positives: √âCHEC');
  }
};

// Test des calculs
const testCalculations = () => {
  console.log('\n2Ô∏è‚É£ Test des calculs...');
  
  const splits = [
    { lotId: 1, fromStorageZoneId: 1, quantity: 25 },
    { lotId: 2, fromStorageZoneId: 2, quantity: 15 }
  ];
  
  // Calcul du total
  const total = splits.reduce((sum, split) => sum + split.quantity, 0);
  console.log(`üìä Total calcul√©: ${total} (attendu: 40)`);
  
  // V√©rification de la disponibilit√©
  const availableQuantities = mockAvailabilityData.availability.map(item => item.availableQuantity);
  const maxAvailable = availableQuantities.reduce((sum, qty) => sum + qty, 0);
  console.log(`üì¶ Disponibilit√© maximale: ${maxAvailable}`);
  
  if (total <= maxAvailable) {
    console.log('‚úÖ Quantit√© demand√©e dans les limites de disponibilit√©');
  } else {
    console.log('‚ùå Quantit√© demand√©e d√©passe la disponibilit√©');
  }
};

// Test des r√®gles m√©tier
const testBusinessRules = () => {
  console.log('\n3Ô∏è‚É£ Test des r√®gles m√©tier...');
  
  const { summary } = mockAvailabilityData;
  
  // R√®gle 1: S√©lection de lot obligatoire pour p√©rissable
  if (summary.requiresLotSelection) {
    console.log('‚úÖ S√©lection de lot obligatoire (article p√©rissable)');
  }
  
  // R√®gle 2: S√©lection de zone obligatoire (plusieurs zones)
  if (summary.requiresZoneSelection) {
    console.log('‚úÖ S√©lection de zone obligatoire (plusieurs zones)');
  }
  
  // R√®gle 3: Livraison directe impossible
  if (!summary.canDirectDelivery) {
    console.log('‚úÖ Livraison directe impossible (contraintes multiples)');
  }
  
  // R√®gle 4: V√©rification des contraintes
  const constraints = [];
  if (summary.requiresLotSelection) constraints.push('Lot');
  if (summary.requiresZoneSelection) constraints.push('Zone');
  
  console.log(`üîí Contraintes appliqu√©es: ${constraints.join(', ')}`);
};

// Ex√©cution des tests
testValidations();
testCalculations();
testBusinessRules();

console.log('\nüéØ Tests termin√©s!');
console.log('\nüìã R√©sum√© des fonctionnalit√©s test√©es:');
console.log('   ‚Ä¢ Validation des quantit√©s totales');
console.log('   ‚Ä¢ Validation des s√©lections obligatoires');
console.log('   ‚Ä¢ Validation des quantit√©s positives');
console.log('   ‚Ä¢ Calculs de disponibilit√©');
console.log('   ‚Ä¢ Application des r√®gles m√©tier');
console.log('   ‚Ä¢ Gestion des contraintes (lot/zone)');
